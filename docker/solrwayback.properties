##solrwayback.properties (UTF-8)

##Url to the UWKA warc-indexer solr-server. Last part is the collectionname
solr.server=${SOLR_URL}

#Solr caching. Will be default false if not defined
solr.server.caching=true
solr.server.caching.max.entries=10000
# Age based cache invalidation is not enabled per default as index watching works better for most cases
# See the descrition of solr.server.check.interval.seconds below for more details
#solr.server.caching.age.seconds=86400

# Solr availability and index change check interval: Every x seconds a query for new documents is issued.
# If an index change is detected, caches will be cleared
#
# The check is light (cached by Solr) if the index has not changed and moderate if the index has been
# changed. If the backing index has billions of records and is continuously updated, active checking
# will strain the system. In that case it is recommended to disable active checking and use fixed time
# cache clearing with solr.server.caching.age.seconds instead.
#
# Default is 60 seconds
# Disable by setting to -1
# If the checking is disabled, consider setting solr.server.caching.age.seconds instead
solr.server.check.interval.seconds=60

## Link to this webapp itself. BaseURL for link rewrites must be full url.
wayback.baseurl=${BASE_URL}

#ArcFileLocationResolverInterface implementation.
#Custom class implementation to map the index-time warc filepath (field source_file_path) to the filepath seen the solrwayback machine.  
#If not defined it will use the source_file_path as it is ( IdentityArcFileResolver)
# If WARC files has been moved instead of reindexing them again, you can provide this FileMovedMappingResolver 
# dk.kb.netarchivesuite.solrwayback.interfaces.FileMovedMappingResolver
#parameters is full path to file with the new location of the WARC files (1 pr line)

#warc.file.resolver.class=dk.kb.netarchivesuite.solrwayback.interfaces.IdentityArcFileResolver
## optional string argument to a custom arcfile resolver
#warc.file.resolver.parameters=something...

warc.file.resolver.class=dk.kb.netarchivesuite.solrwayback.interfaces.ArcHTTPResolver
warc.file.resolver.parameters.path.regexp=(.*/)?([^/]*)$
warc.file.resolver.parameters.path.replacement=${WARC_SERVER_PREFIX}$2
warc.file.resolver.parameters.readfallback=false

#Collection name. This is the name shown when exporting a page to PID-XML.
pid.collection.name=${COLLECTION_NAME}

#Used for preview screenshots. Not required, but then screenshots will not work.
#Uses headless chrome browser. Chrome must be installed on the OS. The chrome.command is typical:
#Linux: chrome
#Ubunutu: chrome.command=chromium-browser
#Windows: chrome.command="C:\Program Files (x86)\Google\Chrome\Application\chrome"
#MAC1: chrome.command=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
#MAC2: chrome.command="open -b com.google.Chrome"
#example command: chromium-browser --headless --disable-gpu --ipc-connection-timeout=3000 --screenshot=test.png --window-size=1280,1024 https://www.google.com/
chrome.command=chromium-browser --headless --disable-gpu --no-sandbox

#This will work on linux. For windows you can use screenshot.temp.imagedir=C:\temp\ , create the temp folder first 
screenshot.temp.imagedir=/tmp/

#Timeout in seconds. Optional, 10 seconds is default. 
screenshot.preview.timeout=10


#The possible values for url.normaliser are: normal, legacy and minimal.
# Only change the normaliser type if you know what you are doing.
# Only use minimal if the solr index was build in warc-indexer earlier that 3.0. All SolrWayback bundles have warc-indexer later than this. (Playback quality is drastically reduced)
# Use Legacy for 3.0-3.1 versions of the warc-indexer.
# Use normal for all warc-indexers version 3.2.0+
url.normaliser=legacy

# Optional list of Solr-params. Format is key1=value1;key2=value2,...
#solr.search.params=facet.limit=2;rows=3
# Add some default values for properties so basic search behaviour is as expected.
solr.search.params=f.url_norm.qf=url;defType=edismax;pf=text;qf=text

